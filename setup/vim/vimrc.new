" vim: set foldmethod=marker foldlevel=0 nomodeline:

" Jashobant Majhi

" Essentials{{{

set nocompatible        " Set 'nocompatible' to ward off unexpected 
                        " things that your distro might have made,
                        " as well as sanely reset options when
                        " re-sourcing .vimrc
syntax enable           " Enable syntax highlighting
filetype indent plugin on
                        " Attempt to determine the type of a file based
                        " on its name and possibly its contents. Use this
                        " to allow intelligent auto-indenting for each
                        " filetype, and for plugins that are filetype
                        " specific.  
" }}}

" General{{{

" Vim with default settings does not allow easy switching between multiple files
" in the same editor window. Users can use multiple split windows or multiple
" tab pages to edit multiple files, but it is still best to enable an option to
" allow easier switching between files.
"
" One such option is the 'hidden' option, which allows you to re-use the same
" window and switch from an unsaved buffer without saving it first. Also allows
" you to keep an undo history for multiple files when re-using the same window
" in this way. Note that using persistent undo also lets you undo in multiple
" files even in the same window, but is less efficient and is actually designed
" for keeping undo history after closing Vim entirely. Vim will complain if you
" try to quit without saving, and swap files will keep you safe if your computer
" crashes.

set hidden
set history=8192        " Number of lines of command line history.
set undolevels=200      " Number of undo levels.

" Make coma leader as its easter to reach
let mapleader = ","
" }}}

" Usability{{{

set backspace=indent,eol,start
                        " Allow backspacing over autoindent,
                        " line breaks and start of insert action

set nostartofline
                        " Stop certain movements from always going to the
                        " first character of a line.

set ruler               " Display the cursor position on the last line
                        " of the screen or in the status line of a window

set laststatus=1        " Always display the status line,
                        " even if only one window is displayed

set confirm             " Instead of failing a command because of unsaved
                        " changes, instead raise a dialogue asking if
                        " you wish to save changed files.

set visualbell          " Use visual bell instead of beeping when doing
                        " something wrong

set t_vb=               " And reset the terminal code for the visual bell.
                        " If visualbell is set, and this line is also
                        " included, vim will neither flash nor beep. If
                        " visualbell is unset, this does nothing.

" set mouse=a        " Enable use of the mouse for all modes

set cmdheight=1         " Set the command window height to 2 lines,
                        " to avoid many cases of having to "press <Enter>
                        " to continue"

set notimeout ttimeout ttimeoutlen=200
                        " Quickly time out on keycodes,
                        " but never time out on mappings

set pastetoggle=<F11>   " Use <F11> to toggle between 'paste' and 'nopaste'
set esckeys             " Cursor keys in insert mode.
set ttyfast             " We have a fast terminal connection.
set autowrite           " Automatically save before :next, :make etc.
set viminfo='20,\"500   " Read/write a .viminfo file, don't store more than
                        " 50 lines of registers.
set isk+=_,$,@,%,#,-    " none of these should be word dividers,
                        " so make them not be
" }}}

" UI{{{

set encoding=utf-8      " Encoding utf8
set number              " Display line numbers on the left
set relativenumber      " Enable relative number
" set cursorline          " highlight current line
set wildmenu            " Display all matching files when we tab complete
set wildmode=list:longest
                        " List all the matches
" set wildchar=<TAB>    " tab as wc for wildmenu
set wildignore+=*.o,*.obj,*.bak,*.exe
                        " Ignore files with these extensions
set showmode            " Show current mode.
set showcmd             " Show partial commands in the last line of the screen
set scrolloff=3         " Keep a context when scrolling.
set noerrorbells        " No beeps.
set list
set listchars=tab:»·,trail:␣,nbsp:˷
" }}}

" Indentation{{{

" Indentation settings for using 4 spaces instead of tabs.
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set autoindent          " When opening a new line and no filetype-specific
                        " indenting is enabled, keep the same indent as the
                        " line you're currently on. Useful for READMEs, etc.
set copyindent

" }}}

" Searching{{{

" makes searches use normal regexes
nnoremap / /\v

" Vim's default 'magic' setting makes characters have
" the same meaning as in grep, and \v (very magic)
" makes them the same as the extended regular expressions
" used by egrep. 
vnoremap / /\v

set ignorecase          " Use case insensitive search,
                        " except when using capital letters

set smartcase           " If you search for an all-lowercase string your search
                        " will be case-insensitive, but if one or more
                        " characters is uppercase the search will be case-sensitive
set gdefault            " Use 'g' flag by default with :s/foo/bar/.
set incsearch           " Incremental search.
set showmatch           " Show matching brackets.
set hlsearch            " Highlight searches

nnoremap <leader><space> :noh<cr>
                        " This gets rid of the distracting highlighting
                        " once I’ve found what I’m looking for

" tab key match bracket pairs
nnoremap <Tab> %
vnoremap <Tab> %

" }}}

" Color{{{

" colorscheme badwolf         " awesome colorscheme
colorscheme koehler
set t_Co=258

" }}}

" Browsing{{{

set path+=**        " Search down into subfolders. Provides
                    " tab-completion for all file-related tasks

" This will disable the arrow keys while you’re in normal mode
" It also disables the arrow keys in insert mode to force you
" to get back into normal mode the instant you’re done
" inserting text, which is the “right way” to do things.
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
nnoremap j gj
nnoremap k gk
nnoremap <space> <C-f>
nnoremap <S><space> <C-b>
"}}}

" Folding{{{

" nnoremap <space> za     " space open/closes folds

"}}}

" Mappings{{{

" Escape insert mode with jj
imap jj <ESC>

" }}}

" Pugins{{{
" Installed{{{
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
Plugin 'Valloric/YouCompleteMe', { 'do': './install.py' }
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
Plugin 'tpope/vim-surround'
Plugin 'raimondi/delimitmate'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'vim-airline/vim-airline'
Plugin 'altercation/vim-colors-solarized'
Plugin 'w0rp/ale'

" All of your Plugins must be added before the following line
call vundle#end()            " required
" }}}

" Disabled Plugins{{{

set runtimepath-=~/.vim/bundle/vim-fugitive
set runtimepath-=~/.vim/bundle/sparkup
set runtimepath-=~/.vim/bundle/YouCompleteMe
set runtimepath-=~/.vim/bundle/fzf
set runtimepath-=~/.vim/bundle/vim-surround
set runtimepath-=~/.vim/bundle/delimitmate
set runtimepath-=~/.vim/bundle/syntastic
" set runtimepath-=~/.vim/bundle/vim-airline
set runtimepath-=~/.vim/bundle/vim-colors-solarized
set runtimepath-=~/.vim/bundle/ale


" }}}

" Plugin Options{{{

" vim-airline
let g:airline#extensions#tabline#enabled = 1

" }}}
" }}}

" Auto Correct{{{

" English.
iab beacuse    because
iab becuase    because
iab acn        can
iab cna        can
iab centre     center
iab chnage     change
iab chnages    changes
iab chnaged    changed
iab chnagelog  changelog
iab Chnage     Change
iab Chnages    Changes
iab ChnageLog  ChangeLog
iab debain     debian
iab Debain     Debian
iab defualt    default
iab Defualt    Default
iab differnt   different
iab diffrent   different
iab emial      email
iab Emial      Email
iab figth      fight
iab figther    fighter
iab fro        for
iab fucntion   function
iab ahve       have
iab homepgae   homepage
iab logifle    logfile
iab lokk       look
iab lokking    looking
iab mial       mail
iab Mial       Mail
iab miantainer maintainer
iab amke       make
iab mroe       more
iab nwe        new
iab recieve    receive
iab recieved   received
iab erturn     return
iab retrun     return
iab retunr     return
iab seperate   separate
iab shoudl     should
iab soem       some
iab taht       that
iab thta       that
iab teh        the
iab tehy       they
iab truely     truly
iab waht       what
iab wiht       with
iab whic       which
iab whihc      which
iab yuo        you
iab databse    database
iab versnio    version
iab obnsolete  obsolete
iab flase      false
iab recrusive  recursive
iab Recrusive  Recursive

" Days of week.
iab monday     Monday
iab tuesday    Tuesday
iab wednesday  Wednesday
iab thursday   Thursday
iab friday     Friday
iab saturday   Saturday
iab sunday     Sunday

" }}}

" Cscope{{{
if has("cscope")
    set csprg=/volume/buildtools/bin/cscope
    set csto=0
    set cst
    set nocsverb
    " add any database in current directory
    " if filereadable("cscope.out")
        " cs add cscope.out
        " else add database pointed to by environment
    " elseif filereadable(expand("$CSCOPE_LOCAL_DB/cscope.out"))
    if filereadable(expand("$CSCOPE_LOCAL_DB/cscope.out"))
            cs add $CSCOPE_LOCAL_DB/cscope.out
    elseif $CSCOPE_DB != ""
        " cs add $CSCOPE_DB
    endif
    set csverb
endif

nmap <C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR> 
nmap <C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR> 
nmap <C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR> 
nmap <C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR> 
nmap <C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR> 
nmap <C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR> 
nmap <C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR> 

nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
" }}}


