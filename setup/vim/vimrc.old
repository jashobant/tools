"------------------------------------------------------------------------------
"Vundle
"------------------------------------------------------------------------------

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'tpope/vim-fugitive'
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
Plugin 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plugin 'junegunn/fzf.vim'

let g:fzf_layout = { 'left': '~30%' }

Plugin 'tpope/vim-surround'
Plugin 'raimondi/delimitmate'
Plugin 'scrooloose/nerdtree'
Plugin 'vim-airline/vim-airline'
Plugin 'dense-analysis/ale', { 'on':  'ALEToggle' }
Plugin 'scrooloose/syntastic', {'on': 'SyntasticToggleMode'}
Plugin 'valloric/youcompleteme'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" Disable Plugins Temporarily

" Disable Syntastic
set runtimepath-=~/.vim/bundle/syntastic

" Disable Airline 
set runtimepath-=~/.vim/bundle/vim-airline

"--------------------------------------------------------------------------------
" Standard stuff.
"--------------------------------------------------------------------------------
set nocompatible        " Use Vim defaults (much better!)
set t_Co=256
set history=8192 	" Number of lines of command line history.
set undolevels=200      " Number of undo levels.
"set textwidth=80         " Don't wrap words by default.
set showcmd             " Show (partial) command in status line.
set showmatch           " Show matching brackets.
set showmode            " Show current mode.
set ruler               " Show the line and column numbers of the cursor.
set ignorecase          " Case insensitive matching.
set incsearch           " Incremental search.
set scrolloff=5         " Keep a context when scrolling.
set noerrorbells        " No beeps.
set modeline            " Enable modeline.
set esckeys             " Cursor keys in insert mode.
set gdefault            " Use 'g' flag by default with :s/foo/bar/.
set ttyscroll=0         " Turn off scrolling (this is faster).
set ttyfast             " We have a fast terminal connection.
set hlsearch            " Highlight search matches.
set autowrite           " Automatically save before :next, :make etc.
set nostartofline       " Do not jump to first character with page commands,
                        " i.e., keep the cursor in the current column.
set viminfo='20,\"500   " Read/write a .viminfo file, don't store more than
                        " 50 lines of registers.
set et 
set wildmenu
set showmatch
set ai
set ci
set ic
set smartcase
set cmdheight=1
set laststatus=2 
set wildignore=*.o,*.obj,*.bak,*.exe
set isk+=_,$,@,%,#,- " none of these should be word dividers, so make them not be
set hid " you can change buffer without saving
set backspace=2 " make backspace work normal
set backspace=indent,eol,start
" set encoding=utf-8

" Search down into subfolders
" " Provides tab-completion for all file-related tasks

set path+=**

" Path/file expansion in colon-mode.
set wildmode=list:longest
set wildchar=<TAB>
set splitright
" Enable syntax-highlighting.
colorscheme koehler
" colorscheme zellner
syntax on
" C comment change to light blue from default
highlight cComment ctermfg=14
filetype on
au BufNewFile,BufRead *.dd set filetype=c
let g:fzf_layout = { 'down': '~40%' }

"--------------------------------------------------------------------------------
" CODING STANDARD
"--------------------------------------------------------------------------------
" set tabstop=8
" set softtabstop=4
" set shiftwidth=4
" set cindent
" set expandtab

"--------------------------------------------------------------------------------
" JUNIPER CODING STANDARD
"--------------------------------------------------------------------------------
set tabstop=8
set softtabstop=4
set shiftwidth=4
" Do not set "expandtabs", it will prevent you from properly formatting code.
" set noexpandtab
set expandtab

" Format code the Juniper way (for *.c and *.h only)
"
set cinoptions=(0
" Remove EOL white space with F10
:nnoremap <silent> <F10> :let _s=@/ <Bar> :%s/\s\+$//e <Bar> :let @/=_s <Bar> :nohl <Bar> :unlet _s <CR>

"--------------------------------------------------------------------------------
" Function keys.
"--------------------------------------------------------------------------------

" F1: Toggle list (display unprintable characters).
nnoremap <F2> :set list!<CR>

" F2: Write a ChangeLog entry.
map <F4> :r !date<CR> Atit> <CR><CR> * |


"--------------------------------------------------------------------------------
" Abbreviations.
"--------------------------------------------------------------------------------

" Use 'g' to go to the top of the file.
map g 1G

" Quit with 'q' instead of ':q'. VERY useful!
map q :q<CR>


"--------------------------------------------------------------------------------
" Local settings.
"--------------------------------------------------------------------------------

" source a local configuration file if available.
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

command! -complete=shellcmd -nargs=+ Shell call s:RunShellCommand(<q-args>)
function! s:RunShellCommand(cmdline)
  echo a:cmdline
  let expanded_cmdline = a:cmdline
  for part in split(a:cmdline, ' ')
     if part[0] =~ '\v[%#<]'
        let expanded_part = fnameescape(expand(part))
        let expanded_cmdline = substitute(expanded_cmdline, part, expanded_part, '')
     endif
  endfor
  botright new
  setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap
  call setline(1, 'You entered:    ' . a:cmdline)
  call setline(2, 'Expanded Form:  ' .expanded_cmdline)
  call setline(3,substitute(getline(2),'.','=','g'))
  execute '$read !'. expanded_cmdline
  setlocal nomodifiable
  1
endfunction

"--------------------------------------------------------------------------------
" Cscope 
"--------------------------------------------------------------------------------

if has("cscope")
	set csprg=/volume/buildtools/bin/cscope
	set csto=0
	set cst
	set nocsverb
	" add any database in current directory
	" if filereadable("cscope.out")
		" cs add cscope.out
		" else add database pointed to by environment
	" elseif filereadable(expand("$CSCOPE_LOCAL_DB/cscope.out"))
	if filereadable(expand("$CSCOPE_LOCAL_DB/cscope.out"))
	        cs add $CSCOPE_LOCAL_DB/cscope.out
	elseif $CSCOPE_DB != ""
		" cs add $CSCOPE_DB
	endif
	set csverb
endif

nmap <C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR> 
nmap <C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR> 
nmap <C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR> 
nmap <C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR> 
nmap <C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR> 
nmap <C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR> 
nmap <C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR> 

nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>	
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>	
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>	
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>	
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>	
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>	
nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>>   
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>	
"--------------------------------------------------------------------------------
"   AUTO COMPLETE
"--------------------------------------------------------------------------------
" configure tags - add additional tags here or comment out not-used ones
set tags+=~/.vim/tags
" OmniCppComplete
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
let OmniCpp_MayCompleteDot = 1 " autocomplete after .
let OmniCpp_MayCompleteArrow = 1 " autocomplete after ->
let OmniCpp_MayCompleteScope = 1 " autocomplete after ::
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest,preview

"inoremap " ""<left>
"inoremap ' ''<left>
"inoremap ( ()<left>
"inoremap [ []<left>
"inoremap { {}<left>
"inoremap {<CR> {<CR>}<ESC>O
"inoremap {;<CR> {<CR>};<ESC>O

"--------------------------------------------------------------------------------
"EnhancedCommentify options
"--------------------------------------------------------------------------------
imap <M-c> <Esc><Plug>Traditionalji
let g:EnhCommentifyRespectIndent = 'yes'
let g:EnhCommentifyPretty = 'yes'
let g:EnhCommentifyMultiPartBlocks = 'yes'

"--------------------------------------------------------------------------------
"show current function name 
"--------------------------------------------------------------------------------
fun! ShowFuncName()
	let lnum = line(".")
	let col = col(".")
	echohl ModeMsg
	echo getline(search("^[^ \t#/]\\{2}.*[^:]\s*$", 'bW'))
	echohl None
	call search("\\%" . lnum . "l" . "\\%" . col . "c")
endfun
map f :call ShowFuncName() <CR> 

:command! -nargs=+ Modtkn :call  Modtkn(<f-args>)
"--------------------------------------------------------------------------------
" mappings
"--------------------------------------------------------------------------------

" Enable this if you mistype :w as :W or :q as :Q.
command W w
command Q q

set grepprg=grep\ -n\ --color=auto
"--------------------------------------------------------------------------------
" Statusline
"http://got-ravings.blogspot.in/2008/08/vim-pr0n-making-statuslines-that-own.html
"http://got-ravings.blogspot.in/search/label/statuslines
"http://vim.wikia.com/wiki/VimTip1454 (for function in the status line)
"--------------------------------------------------------------------------------
highlight StatusLine ctermfg=black ctermbg=14
highlight StatusLineNC ctermfg=6 ctermbg=black  
"set statusline=%t[%{strlen(&fenc)?&fenc:'none'},%{&ff}]%h%m%r%y%=%c,%l/%L\ %P
"set statusline=   " clear the statusline for when vimrc is reloaded
"set statusline+=%-3.3n\                      " buffer number
"set statusline+=%f\                          " file name
"set statusline+=%h%m%r%w                     " flags
"set statusline+=[%{strlen(&ft)?&ft:'none'},  " filetype
"set statusline+=%{strlen(&fenc)?&fenc:&enc}, " encoding
"set statusline+=%{&fileformat}]              " file format
"set statusline+=%=                           " right align
"set statusline+=%{synIDattr(synID(line('.'),col('.'),1),'name')}\  " highlight
"set statusline+=%b,0x%-8B\                   " current char
"set statusline+=%-14.(%l,%c%V%)\ %<%P        " offset

"------------------------------------------------------------------------------
" Correct typos.
"------------------------------------------------------------------------------

" English.
iab beacuse    because
iab becuase    because
iab acn        can
iab cna        can
iab centre     center
iab chnage     change
iab chnages    changes
iab chnaged    changed
iab chnagelog  changelog
iab Chnage     Change
iab Chnages    Changes
iab ChnageLog  ChangeLog
iab debain     debian
iab Debain     Debian
iab defualt    default
iab Defualt    Default
iab differnt   different
iab diffrent   different
iab emial      email
iab Emial      Email
iab figth      fight
iab figther    fighter
iab fro        for
iab fucntion   function
iab ahve       have
iab homepgae   homepage
iab logifle    logfile
iab lokk       look
iab lokking    looking
iab mial       mail
iab Mial       Mail
iab miantainer maintainer
iab amke       make
iab mroe       more
iab nwe        new
iab recieve    receive
iab recieved   received
iab erturn     return
iab retrun     return
iab retunr     return
iab seperate   separate
iab shoudl     should
iab soem       some
iab taht       that
iab thta       that
iab teh        the
iab tehy       they
iab truely     truly
iab waht       what
iab wiht       with
iab whic       which
iab whihc      which
iab yuo        you
iab databse    database
iab versnio    version
iab obnsolete  obsolete
iab flase      false
iab recrusive  recursive
iab Recrusive  Recursive

" Days of week.
iab monday     Monday
iab tuesday    Tuesday
iab wednesday  Wednesday
iab thursday   Thursday
iab friday     Friday
iab saturday   Saturday
iab sunday     Sunday


" ----------------------------------------------------------------------------
"  ALE
" ----------------------------------------------------------------------------

let g:ale_linters = {'java': [], 'yaml': [], 'scala': [], 'clojure': []}
let g:ale_fixers = {'ruby': ['rubocop']}
let g:ale_lint_delay = 1000

" ----------------------------------------------------------------------------
"  SYNTASTIC
" ----------------------------------------------------------------------------

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
